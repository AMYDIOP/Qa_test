<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.3 (Python 3.13.2 on darwin)" generated="2025-08-07T12:46:16.192879" rpa="false" schemaversion="5">
<suite id="s1" name="Test Crud Integration" source="/Users/bambasene/PycharmProjects/RobotFramework/Exam_Qa_Test/lab1/testcases/test_crud_integration.robot">
<kw name="Connecter MongoDB" owner="keywords" type="SETUP">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.610022" level="INFO">${client} = MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], document_class=dict, tz_a...</msg>
<var>${client}</var>
<arg>__import__('pymongo').MongoClient("${MONGODB_CONNECTION_STRING}")</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:16.225364" elapsed="0.384730"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.610823" level="INFO">${db} = Database(MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], document_class=d...</msg>
<var>${db}</var>
<arg>$client["${DATABASE_NAME}"]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:16.610319" elapsed="0.000546"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.611382" level="INFO">${coll} = Collection(Database(MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], docum...</msg>
<var>${coll}</var>
<arg>$db["${COLLECTION_NAME}"]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:16.611008" elapsed="0.000411"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.611815" level="INFO">${DB_CLIENT} = MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], document_class=dict, tz_a...</msg>
<arg>${DB_CLIENT}</arg>
<arg>${client}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-08-07T12:46:16.611550" elapsed="0.000322"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.612240" level="INFO">${DATABASE} = Database(MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], document_class=d...</msg>
<arg>${DATABASE}</arg>
<arg>${db}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-08-07T12:46:16.612001" elapsed="0.000294"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.612637" level="INFO">${COLLECTION} = Collection(Database(MongoClient(host=['ac-sbw62oc-shard-00-02.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-01.qdewjiz.mongodb.net:27017', 'ac-sbw62oc-shard-00-00.qdewjiz.mongodb.net:27017'], docum...</msg>
<arg>${COLLECTION}</arg>
<arg>${coll}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-08-07T12:46:16.612413" elapsed="0.000277"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.612920" level="INFO">Connexion MongoDB réussie</msg>
<arg>Connexion MongoDB réussie</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:16.612808" elapsed="0.000164"/>
</kw>
<doc>Se connecter à MongoDB Atlas</doc>
<status status="PASS" start="2025-08-07T12:46:16.224993" elapsed="0.388059"/>
</kw>
<test id="s1-t1" name="CREATE - Scénario Passant - Créer Produit Valide" line="11">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:16.613804" level="INFO">=== TEST CREATE PASSANT ===</msg>
<arg>=== TEST CREATE PASSANT ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:16.613670" elapsed="0.000193"/>
</kw>
<kw name="Compter Produits" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.104862" level="INFO">${count} = 0</msg>
<var>${count}</var>
<arg>$COLLECTION.count_documents({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:16.614899" elapsed="2.490089"/>
</kw>
<return>
<value>${count}</value>
<status status="PASS" start="2025-08-07T12:46:19.105134" elapsed="0.000092"/>
</return>
<msg time="2025-08-07T12:46:19.105490" level="INFO">${count_avant} = 0</msg>
<var>${count_avant}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Compter les produits avec cet ID</doc>
<status status="PASS" start="2025-08-07T12:46:16.614110" elapsed="2.491426"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.106070" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${count_avant}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:19.105816" elapsed="0.000365"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.339900" level="INFO">${result} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3311'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:19.107327" elapsed="0.232707"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:19.340244" elapsed="0.000082"/>
</return>
<msg time="2025-08-07T12:46:19.340587" level="INFO">${result} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3311'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:19.106510" elapsed="0.234124"/>
</kw>
<kw name="Should Not Be Equal" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.341909" level="INFO">Argument types are:
&lt;class 'bson.objectid.ObjectId'&gt;
&lt;class 'NoneType'&gt;</msg>
<arg>${result.inserted_id}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" start="2025-08-07T12:46:19.340900" elapsed="0.001120"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.342412" level="INFO">CREATE PASSANT - Produit créé avec succès</msg>
<arg>CREATE PASSANT - Produit créé avec succès</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:19.342257" elapsed="0.000230"/>
</kw>
<doc>Test de création réussie d'un produit</doc>
<tag>create</tag>
<tag>positive</tag>
<status status="PASS" start="2025-08-07T12:46:16.613134" elapsed="2.729604"/>
</test>
<test id="s1-t2" name="CREATE - Scénario Non Passant 1 - Données Invalides" line="29">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.343687" level="INFO">=== TEST CREATE NON PASSANT 1 ===</msg>
<arg>=== TEST CREATE NON PASSANT 1 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:19.343545" elapsed="0.000208"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.345400" level="INFO">&amp;{données_invalides} = { id=1000 | title= | price=prix_invalide | category=electronics }</msg>
<var>&amp;{données_invalides}</var>
<arg>id=${TEST_PRODUCT_ID + 1}</arg>
<arg>title=${EMPTY}</arg>
<arg>price=prix_invalide</arg>
<arg>category=electronics</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-08-07T12:46:19.343934" elapsed="0.001510"/>
</kw>
<try>
<branch type="TRY">
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.589488" level="INFO">${result} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3312'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:19.346397" elapsed="0.243157"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:19.589658" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:19.589971" level="INFO">${result} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3312'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{données_invalides}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:19.345940" elapsed="0.244080"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.821713" level="INFO">${product} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3312'), 'id': 1000, 'title': '', 'price': 'prix_invalide', 'category': 'electronics'}</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:19.591481" elapsed="0.230331"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:19.821982" elapsed="0.000060"/>
</return>
<msg time="2025-08-07T12:46:19.822288" level="INFO">${produit} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3312'), 'id': 1000, 'title': '', 'price': 'prix_invalide', 'category': 'electronics'}</msg>
<var>${produit}</var>
<arg>${TEST_PRODUCT_ID + 1}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:19.590299" elapsed="0.232035"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${produit['title']}</arg>
<arg>${EMPTY}</arg>
<arg>Validation MongoDB pas stricte</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-08-07T12:46:19.822527" elapsed="0.001605"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.824494" level="INFO">️ MongoDB a accepté les données invalides</msg>
<arg>️ MongoDB a accepté les données invalides</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:19.824321" elapsed="0.000238"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:19.345740" elapsed="0.478868"/>
</branch>
<branch type="EXCEPT">
<kw name="Log" owner="BuiltIn">
<arg>Données invalides rejetées comme attendu</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-08-07T12:46:19.824812" elapsed="0.000029"/>
</kw>
<status status="NOT RUN" start="2025-08-07T12:46:19.824686" elapsed="0.000201"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:19.345673" elapsed="0.479262"/>
</try>
<doc>Test d'échec avec des données invalides</doc>
<tag>create</tag>
<tag>negative</tag>
<status status="PASS" start="2025-08-07T12:46:19.343033" elapsed="0.482097"/>
</test>
<test id="s1-t3" name="CREATE - Scénario Non Passant 2 - ID Dupliqué" line="53">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:19.825997" level="INFO">=== TEST CREATE NON PASSANT 2 ===</msg>
<arg>=== TEST CREATE NON PASSANT 2 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:19.825861" elapsed="0.000198"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.053565" level="INFO">${result} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3313'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:19.826764" elapsed="0.226902"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:20.053827" elapsed="0.000066"/>
</return>
<msg time="2025-08-07T12:46:20.054137" level="INFO">${result1} = InsertOneResult(ObjectId('6894a01b2a7cc65a8e6e3313'), acknowledged=True)</msg>
<var>${result1}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:19.826298" elapsed="0.227885"/>
</kw>
<kw name="Should Not Be Equal" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.055393" level="INFO">Argument types are:
&lt;class 'bson.objectid.ObjectId'&gt;
&lt;class 'NoneType'&gt;</msg>
<arg>${result1.inserted_id}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" start="2025-08-07T12:46:20.054452" elapsed="0.001042"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.056271" level="INFO">&amp;{produit_dupliqué} = { id=999 | title=Produit Dupliqué | price=99.99 | category=electronics }</msg>
<var>&amp;{produit_dupliqué}</var>
<arg>id=${TEST_PRODUCT_ID}</arg>
<arg>title=Produit Dupliqué</arg>
<arg>price=99.99</arg>
<arg>category=electronics</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-08-07T12:46:20.055740" elapsed="0.000574"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.293637" level="INFO">${result} = InsertOneResult(ObjectId('6894a01c2a7cc65a8e6e3314'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:20.057008" elapsed="0.236731"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:20.293901" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:20.294204" level="INFO">${result2} = InsertOneResult(ObjectId('6894a01c2a7cc65a8e6e3314'), acknowledged=True)</msg>
<var>${result2}</var>
<arg>&amp;{produit_dupliqué}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:20.056586" elapsed="0.237664"/>
</kw>
<kw name="Compter Produits" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.523700" level="INFO">${count} = 3</msg>
<var>${count}</var>
<arg>$COLLECTION.count_documents({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:20.295075" elapsed="0.228691"/>
</kw>
<return>
<value>${count}</value>
<status status="PASS" start="2025-08-07T12:46:20.523899" elapsed="0.000089"/>
</return>
<msg time="2025-08-07T12:46:20.524272" level="INFO">${count_final} = 3</msg>
<var>${count_final}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Compter les produits avec cet ID</doc>
<status status="PASS" start="2025-08-07T12:46:20.294610" elapsed="0.229707"/>
</kw>
<if>
<branch type="IF" condition="${count_final} &gt; 1">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.525077" level="INFO">MongoDB a autorisé les ID dupliqués (comportement par défaut)</msg>
<arg>MongoDB a autorisé les ID dupliqués (comportement par défaut)</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:20.524906" elapsed="0.000253"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.525587" level="INFO">Nombre de produits avec ID 999: 3</msg>
<arg>Nombre de produits avec ID ${TEST_PRODUCT_ID}: ${count_final}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:20.525333" elapsed="0.000337"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:20.524545" elapsed="0.001185"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>Duplication bloquée par une contrainte</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-08-07T12:46:20.525951" elapsed="0.000035"/>
</kw>
<status status="NOT RUN" start="2025-08-07T12:46:20.525791" elapsed="0.000361"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:20.524498" elapsed="0.001709"/>
</if>
<doc>Test d'échec avec ID dupliqué</doc>
<tag>create</tag>
<tag>negative</tag>
<status status="PASS" start="2025-08-07T12:46:19.825403" elapsed="0.701015"/>
</test>
<test id="s1-t4" name="READ - Scénario Passant - Lire Produit Existant" line="83">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.527319" level="INFO">=== TEST READ PASSANT ===</msg>
<arg>=== TEST READ PASSANT ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:20.527182" elapsed="0.000204"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.763677" level="INFO">${result} = InsertOneResult(ObjectId('6894a01c2a7cc65a8e6e3315'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:20.528091" elapsed="0.235723"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:20.763925" elapsed="0.000063"/>
</return>
<msg time="2025-08-07T12:46:20.764231" level="INFO">${result} = InsertOneResult(ObjectId('6894a01c2a7cc65a8e6e3315'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:20.527627" elapsed="0.236650"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.997719" level="INFO">${product} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': 'Test Product Robot Framework', 'price': 29.99, 'description': 'Un produit de test créé par Robot Framework', 'category': 'electronics...</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:20.765123" elapsed="0.232703"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:20.997991" elapsed="0.000080"/>
</return>
<msg time="2025-08-07T12:46:20.998322" level="INFO">${produit} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': 'Test Product Robot Framework', 'price': 29.99, 'description': 'Un produit de test créé par Robot Framework', 'category': 'electronics...</msg>
<var>${produit}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:20.764629" elapsed="0.233742"/>
</kw>
<kw name="Should Not Be Equal" owner="BuiltIn">
<msg time="2025-08-07T12:46:20.998915" level="INFO">Argument types are:
&lt;class 'dict'&gt;
&lt;class 'NoneType'&gt;</msg>
<arg>${produit}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" start="2025-08-07T12:46:20.998644" elapsed="0.000360"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${produit['title']}</arg>
<arg>${VALID_PRODUCT_DATA['title']}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-08-07T12:46:20.999220" elapsed="0.001457"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<arg>${produit['price']}</arg>
<arg>${VALID_PRODUCT_DATA['price']}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2025-08-07T12:46:21.000860" elapsed="0.001171"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.002894" level="INFO">READ PASSANT - Produit lu: Test Product Robot Framework</msg>
<arg>READ PASSANT - Produit lu: ${produit['title']}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:21.002225" elapsed="0.000735"/>
</kw>
<doc>Test de lecture réussie</doc>
<tag>positive</tag>
<tag>read</tag>
<status status="PASS" start="2025-08-07T12:46:20.526728" elapsed="0.476407"/>
</test>
<test id="s1-t5" name="READ - Scénario Non Passant 1 - ID Inexistant" line="102">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.004037" level="INFO">=== TEST READ NON PASSANT 1 ===</msg>
<arg>=== TEST READ NON PASSANT 1 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:21.003871" elapsed="0.000221"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.241394" level="INFO">${product} = None</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:21.005167" elapsed="0.236328"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:21.241651" elapsed="0.000089"/>
</return>
<msg time="2025-08-07T12:46:21.242014" level="INFO">${produit} = None</msg>
<var>${produit}</var>
<arg>${INVALID_PRODUCT_ID}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:21.004313" elapsed="0.237747"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${produit}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-08-07T12:46:21.242326" elapsed="0.000323"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.243014" level="INFO">READ NON PASSANT 1 - Aucun produit trouvé comme attendu</msg>
<arg>READ NON PASSANT 1 - Aucun produit trouvé comme attendu</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:21.242867" elapsed="0.000222"/>
</kw>
<doc>Test de lecture avec ID inexistant</doc>
<tag>negative</tag>
<tag>read</tag>
<status status="PASS" start="2025-08-07T12:46:21.003391" elapsed="0.239905"/>
</test>
<test id="s1-t6" name="READ - Scénario Non Passant 2 - Format ID Invalide" line="116">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.244347" level="INFO">=== TEST READ NON PASSANT 2 ===</msg>
<arg>=== TEST READ NON PASSANT 2 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:21.244173" elapsed="0.000236"/>
</kw>
<try>
<branch type="TRY">
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.473084" level="INFO">${product} = None</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:21.245069" elapsed="0.228140"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:21.473327" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:21.473631" level="INFO">${produit} = None</msg>
<var>${produit}</var>
<arg>"abc123"</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:21.244756" elapsed="0.228920"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${produit}</arg>
<arg>${None}</arg>
<arg>Format invalide mais pas d'erreur</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-08-07T12:46:21.473870" elapsed="0.000384"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:21.244575" elapsed="0.229755"/>
</branch>
<branch type="EXCEPT">
<kw name="Log" owner="BuiltIn">
<arg>Format ID invalide rejeté</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-08-07T12:46:21.474564" elapsed="0.000036"/>
</kw>
<status status="NOT RUN" start="2025-08-07T12:46:21.474417" elapsed="0.000240"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:21.244522" elapsed="0.230199"/>
</try>
<doc>Test avec format d'ID invalide</doc>
<tag>negative</tag>
<tag>read</tag>
<status status="PASS" start="2025-08-07T12:46:21.243604" elapsed="0.231349"/>
</test>
<test id="s1-t7" name="UPDATE - Scénario Passant - Modifier Produit" line="130">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.476073" level="INFO">=== TEST UPDATE PASSANT ===</msg>
<arg>=== TEST UPDATE PASSANT ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:21.475933" elapsed="0.000205"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.723909" level="INFO">${result} = InsertOneResult(ObjectId('6894a01d2a7cc65a8e6e3316'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:21.476845" elapsed="0.247167"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:21.724165" elapsed="0.000063"/>
</return>
<msg time="2025-08-07T12:46:21.724473" level="INFO">${result} = InsertOneResult(ObjectId('6894a01d2a7cc65a8e6e3316'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:21.476381" elapsed="0.248138"/>
</kw>
<kw name="Modifier Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.972623" level="INFO">${result} = UpdateResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570782, 1), 't': 64}, 'nModified': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result}</var>
<arg>$COLLECTION.update_one({"id": ${product_id}}, {"$set": $update_data})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:21.725492" elapsed="0.247235"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:21.972878" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:21.973211" level="INFO">${result_update} = UpdateResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570782, 1), 't': 64}, 'nModified': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result_update}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<arg>&amp;{UPDATE_PRODUCT_DATA}</arg>
<doc>Modifier un produit</doc>
<status status="PASS" start="2025-08-07T12:46:21.724874" elapsed="0.248386"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:21.974342" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${result_update.modified_count}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:21.973531" elapsed="0.000915"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.201629" level="INFO">${product} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': 'Test Product UPDATED', 'price': 39.99, 'description': 'Produit mis à jour par Robot Framework', 'category': 'electronics', 'image': '...</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:21.975204" elapsed="0.226581"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:22.201895" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:22.202227" level="INFO">${produit_modifié} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': 'Test Product UPDATED', 'price': 39.99, 'description': 'Produit mis à jour par Robot Framework', 'category': 'electronics', 'image': '...</msg>
<var>${produit_modifié}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:21.974765" elapsed="0.227512"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${produit_modifié['title']}</arg>
<arg>${UPDATE_PRODUCT_DATA['title']}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-08-07T12:46:22.202543" elapsed="0.001485"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<arg>${produit_modifié['price']}</arg>
<arg>${UPDATE_PRODUCT_DATA['price']}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2025-08-07T12:46:22.204274" elapsed="0.001146"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.206258" level="INFO">UPDATE PASSANT - Produit modifié: Test Product UPDATED</msg>
<arg>UPDATE PASSANT - Produit modifié: ${produit_modifié['title']}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:22.205616" elapsed="0.000711"/>
</kw>
<doc>Test de modification réussie</doc>
<tag>positive</tag>
<tag>update</tag>
<status status="PASS" start="2025-08-07T12:46:21.475388" elapsed="0.731117"/>
</test>
<test id="s1-t8" name="UPDATE - Scénario Non Passant 1 - ID Inexistant" line="152">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.207493" level="INFO">=== TEST UPDATE NON PASSANT 1 ===</msg>
<arg>=== TEST UPDATE NON PASSANT 1 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:22.207256" elapsed="0.000310"/>
</kw>
<kw name="Modifier Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.444734" level="INFO">${result} = UpdateResult({'n': 0, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570782, 2), 't': 64}, 'nModified': 0, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result}</var>
<arg>$COLLECTION.update_one({"id": ${product_id}}, {"$set": $update_data})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:22.208248" elapsed="0.236617"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:22.445008" elapsed="0.000062"/>
</return>
<msg time="2025-08-07T12:46:22.445332" level="INFO">${result} = UpdateResult({'n': 0, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570782, 2), 't': 64}, 'nModified': 0, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result}</var>
<arg>${INVALID_PRODUCT_ID}</arg>
<arg>&amp;{UPDATE_PRODUCT_DATA}</arg>
<doc>Modifier un produit</doc>
<status status="PASS" start="2025-08-07T12:46:22.207836" elapsed="0.237544"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.446518" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${result.modified_count}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:22.445643" elapsed="0.000978"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.447005" level="INFO">UPDATE NON PASSANT 1 - Aucun document modifié</msg>
<arg>UPDATE NON PASSANT 1 - Aucun document modifié</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:22.446851" elapsed="0.000231"/>
</kw>
<doc>Test de modification avec ID inexistant</doc>
<tag>negative</tag>
<tag>update</tag>
<status status="PASS" start="2025-08-07T12:46:22.206761" elapsed="0.240534"/>
</test>
<test id="s1-t9" name="UPDATE - Scénario Non Passant 2 - Données Invalides" line="166">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.448210" level="INFO">=== TEST UPDATE NON PASSANT 2 ===</msg>
<arg>=== TEST UPDATE NON PASSANT 2 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:22.448074" elapsed="0.000199"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.688822" level="INFO">${result} = InsertOneResult(ObjectId('6894a01e2a7cc65a8e6e3317'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:22.448988" elapsed="0.239964"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:22.689066" elapsed="0.000066"/>
</return>
<msg time="2025-08-07T12:46:22.689384" level="INFO">${result} = InsertOneResult(ObjectId('6894a01e2a7cc65a8e6e3317'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:22.448516" elapsed="0.240915"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.690741" level="INFO">&amp;{update_invalide} = { price=-10.50 | title= }</msg>
<var>&amp;{update_invalide}</var>
<arg>price=-10.50</arg>
<arg>title=${EMPTY}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-08-07T12:46:22.689717" elapsed="0.001078"/>
</kw>
<kw name="Modifier Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.923879" level="INFO">${result} = UpdateResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570783, 1), 't': 64}, 'nModified': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result}</var>
<arg>$COLLECTION.update_one({"id": ${product_id}}, {"$set": $update_data})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:22.691694" elapsed="0.232292"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:22.924169" elapsed="0.000062"/>
</return>
<msg time="2025-08-07T12:46:22.924498" level="INFO">${result_update} = UpdateResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570783, 1), 't': 64}, 'nModified': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754...</msg>
<var>${result_update}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<arg>&amp;{update_invalide}</arg>
<doc>Modifier un produit</doc>
<status status="PASS" start="2025-08-07T12:46:22.691124" elapsed="0.233424"/>
</kw>
<if>
<branch type="IF" condition="${result_update.modified_count} &gt; 0">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:22.925831" level="INFO">️ MongoDB a accepté les données invalides</msg>
<arg>️ MongoDB a accepté les données invalides</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:22.925655" elapsed="0.000262"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.176863" level="INFO">${product} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': '', 'price': '-10.50', 'description': 'Produit mis à jour par Robot Framework', 'category': 'electronics', 'image': 'https://fakestore...</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:22.926606" elapsed="0.250292"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:23.176952" elapsed="0.000033"/>
</return>
<msg time="2025-08-07T12:46:23.177104" level="INFO">${produit} = {'_id': ObjectId('6894a01b2a7cc65a8e6e3311'), 'id': 999, 'title': '', 'price': '-10.50', 'description': 'Produit mis à jour par Robot Framework', 'category': 'electronics', 'image': 'https://fakestore...</msg>
<var>${produit}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:22.926171" elapsed="0.250956"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.177663" level="INFO">Prix négatif autorisé: -10.50</msg>
<arg>Prix négatif autorisé: ${produit['price']}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:23.177221" elapsed="0.000481"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:22.924777" elapsed="0.252954"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<arg>Données invalides rejetées</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-08-07T12:46:23.177838" elapsed="0.000016"/>
</kw>
<status status="NOT RUN" start="2025-08-07T12:46:23.177758" elapsed="0.000122"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:22.924736" elapsed="0.253162"/>
</if>
<doc>Test avec données de modification invalides</doc>
<tag>negative</tag>
<tag>update</tag>
<status status="PASS" start="2025-08-07T12:46:22.447581" elapsed="0.730428"/>
</test>
<test id="s1-t10" name="DELETE - Scénario Passant - Supprimer Produit Existant" line="191">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.178535" level="INFO">=== TEST DELETE PASSANT ===</msg>
<arg>=== TEST DELETE PASSANT ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:23.178453" elapsed="0.000121"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.408430" level="INFO">${cleanup_result} = DeleteResult({'n': 6, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570783, 2), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570783, 2), 'sig...</msg>
<var>${cleanup_result}</var>
<arg>$COLLECTION.delete_many({"id": ${TEST_PRODUCT_ID}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:23.178672" elapsed="0.229861"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.409835" level="INFO">Nettoyage préalable: 6 documents supprimés</msg>
<arg>Nettoyage préalable: ${cleanup_result.deleted_count} documents supprimés</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:23.408904" elapsed="0.001003"/>
</kw>
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.660343" level="INFO">${result} = InsertOneResult(ObjectId('6894a01f2a7cc65a8e6e3318'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:23.410719" elapsed="0.249696"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:23.660523" elapsed="0.000093"/>
</return>
<msg time="2025-08-07T12:46:23.660926" level="INFO">${result_create} = InsertOneResult(ObjectId('6894a01f2a7cc65a8e6e3318'), acknowledged=True)</msg>
<var>${result_create}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:23.410234" elapsed="0.250747"/>
</kw>
<kw name="Should Not Be Equal" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.662060" level="INFO">Argument types are:
&lt;class 'bson.objectid.ObjectId'&gt;
&lt;class 'NoneType'&gt;</msg>
<arg>${result_create.inserted_id}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" start="2025-08-07T12:46:23.661252" elapsed="0.000887"/>
</kw>
<kw name="Compter Produits" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.891574" level="INFO">${count} = 1</msg>
<var>${count}</var>
<arg>$COLLECTION.count_documents({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:23.662765" elapsed="0.228909"/>
</kw>
<return>
<value>${count}</value>
<status status="PASS" start="2025-08-07T12:46:23.891843" elapsed="0.000060"/>
</return>
<msg time="2025-08-07T12:46:23.892137" level="INFO">${exists_before} = 1</msg>
<var>${exists_before}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Compter les produits avec cet ID</doc>
<status status="PASS" start="2025-08-07T12:46:23.662404" elapsed="0.229898"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:23.892854" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exists_before}</arg>
<arg>1</arg>
<arg>Produit n'existe pas avant suppression</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:23.892568" elapsed="0.000402"/>
</kw>
<kw name="Supprimer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.122162" level="INFO">${result} = DeleteResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570784, 3), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570784, 3), 'sig...</msg>
<var>${result}</var>
<arg>$COLLECTION.delete_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:23.893725" elapsed="0.228579"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:24.122416" elapsed="0.000063"/>
</return>
<msg time="2025-08-07T12:46:24.122742" level="INFO">${result} = DeleteResult({'n': 1, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570784, 3), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570784, 3), 'sig...</msg>
<var>${result}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Supprimer un produit</doc>
<status status="PASS" start="2025-08-07T12:46:23.893287" elapsed="0.229505"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.123988" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${result.deleted_count}</arg>
<arg>1</arg>
<arg>Aucun document supprimé</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:24.123051" elapsed="0.001043"/>
</kw>
<kw name="Compter Produits" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.357559" level="INFO">${count} = 0</msg>
<var>${count}</var>
<arg>$COLLECTION.count_documents({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:24.124908" elapsed="0.232756"/>
</kw>
<return>
<value>${count}</value>
<status status="PASS" start="2025-08-07T12:46:24.357825" elapsed="0.000066"/>
</return>
<msg time="2025-08-07T12:46:24.358131" level="INFO">${exists_after} = 0</msg>
<var>${exists_after}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Compter les produits avec cet ID</doc>
<status status="PASS" start="2025-08-07T12:46:24.124459" elapsed="0.233718"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.358729" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${exists_after}</arg>
<arg>0</arg>
<arg>Produit existe encore après suppression</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:24.358439" elapsed="0.000390"/>
</kw>
<kw name="Lire Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.598866" level="INFO">${product} = None</msg>
<var>${product}</var>
<arg>$COLLECTION.find_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:24.359609" elapsed="0.239357"/>
</kw>
<return>
<value>${product}</value>
<status status="PASS" start="2025-08-07T12:46:24.599124" elapsed="0.000061"/>
</return>
<msg time="2025-08-07T12:46:24.599422" level="INFO">${product} = None</msg>
<var>${product}</var>
<arg>${TEST_PRODUCT_ID}</arg>
<doc>Lire un produit par ID</doc>
<status status="PASS" start="2025-08-07T12:46:24.359145" elapsed="0.240322"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${product}</arg>
<arg>${None}</arg>
<arg>Produit encore lisible après suppression</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-08-07T12:46:24.599741" elapsed="0.000362"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.600479" level="INFO">DELETE PASSANT - Produit supprimé avec succès</msg>
<arg>DELETE PASSANT - Produit supprimé avec succès</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:24.600331" elapsed="0.000224"/>
</kw>
<doc>Test de suppression réussie d'un produit existant</doc>
<tag>delete</tag>
<tag>positive</tag>
<tag>smoke</tag>
<status status="PASS" start="2025-08-07T12:46:23.178158" elapsed="1.422605"/>
</test>
<test id="s1-t11" name="DELETE - Scénario Non Passant 1 - ID Inexistant" line="225">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.601817" level="INFO">=== TEST DELETE NON PASSANT 1 ===</msg>
<arg>=== TEST DELETE NON PASSANT 1 ===</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:24.601683" elapsed="0.000197"/>
</kw>
<kw name="Supprimer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.828387" level="INFO">${result} = DeleteResult({'n': 0, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570784, 5), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570784, 5), 'sig...</msg>
<var>${result}</var>
<arg>$COLLECTION.delete_one({"id": ${product_id}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:24.602472" elapsed="0.225985"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:24.828576" elapsed="0.000064"/>
</return>
<msg time="2025-08-07T12:46:24.828901" level="INFO">${result} = DeleteResult({'n': 0, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570784, 5), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570784, 5), 'sig...</msg>
<var>${result}</var>
<arg>${INVALID_PRODUCT_ID}</arg>
<doc>Supprimer un produit</doc>
<status status="PASS" start="2025-08-07T12:46:24.602117" elapsed="0.226834"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.830131" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${result.deleted_count}</arg>
<arg>0</arg>
<arg>Document supprimé alors qu'il ne devrait pas exister</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-08-07T12:46:24.829229" elapsed="0.001006"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:24.830635" level="INFO">DELETE NON PASSANT 1 - Échec attendu avec ID inexistant</msg>
<arg>DELETE NON PASSANT 1 - Échec attendu avec ID inexistant</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:24.830482" elapsed="0.000255"/>
</kw>
<doc>Test d'échec de suppression avec ID inexistant</doc>
<tag>delete</tag>
<tag>negative</tag>
<tag>notfound</tag>
<status status="PASS" start="2025-08-07T12:46:24.601096" elapsed="0.229810"/>
</test>
<test id="s1-t12" name="DELETE - Scénario Non Passant 2 - Tentative Suppression Sans Permission" line="239">
<kw name="Créer Produit" owner="keywords">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.065519" level="INFO">${result} = InsertOneResult(ObjectId('6894a0202a7cc65a8e6e3319'), acknowledged=True)</msg>
<var>${result}</var>
<arg>$COLLECTION.insert_one($product_data)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:24.832942" elapsed="0.232678"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" start="2025-08-07T12:46:25.065800" elapsed="0.000063"/>
</return>
<msg time="2025-08-07T12:46:25.066231" level="INFO">${result} = InsertOneResult(ObjectId('6894a0202a7cc65a8e6e3319'), acknowledged=True)</msg>
<var>${result}</var>
<arg>&amp;{VALID_PRODUCT_DATA}</arg>
<doc>Créer un produit dans MongoDB</doc>
<status status="PASS" start="2025-08-07T12:46:24.831698" elapsed="0.234583"/>
</kw>
<try>
<branch type="TRY">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.310495" level="INFO">${result} = DeleteResult({'n': 5, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570785, 2), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570785, 2), 'sig...</msg>
<var>${result}</var>
<arg>$COLLECTION.delete_many({})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:25.066680" elapsed="0.243922"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.311783" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg time="2025-08-07T12:46:25.311980" level="FAIL">ATTENTION: Suppression massive non contrôlée détectée !: 5 != 0</msg>
<arg>${result.deleted_count}</arg>
<arg>0</arg>
<arg>msg=ATTENTION: Suppression massive non contrôlée détectée !</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="FAIL" start="2025-08-07T12:46:25.310854" elapsed="0.001390">ATTENTION: Suppression massive non contrôlée détectée !: 5 != 0</status>
</kw>
<status status="FAIL" start="2025-08-07T12:46:25.066513" elapsed="0.245875">ATTENTION: Suppression massive non contrôlée détectée !: 5 != 0</status>
</branch>
<branch type="EXCEPT">
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.312794" level="INFO">Opération dangereuse correctement bloquée</msg>
<arg>Opération dangereuse correctement bloquée</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:25.312639" elapsed="0.000237"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:25.312488" elapsed="0.000449"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:25.066449" elapsed="0.246548"/>
</try>
<doc>Test d'échec avec opération non autorisée</doc>
<tag>delete</tag>
<tag>negative</tag>
<tag>security</tag>
<status status="PASS" start="2025-08-07T12:46:24.831164" elapsed="0.482064"/>
</test>
<kw name="Run Keywords" owner="BuiltIn" type="TEARDOWN">
<kw name="Nettoyer Tests" owner="keywords">
<try>
<branch type="TRY">
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.554569" level="INFO">${result} = DeleteResult({'n': 0, 'electionId': ObjectId('7fffffff0000000000000040'), 'opTime': {'ts': Timestamp(1754570785, 3), 't': 64}, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1754570785, 3), 'sig...</msg>
<var>${result}</var>
<arg>$COLLECTION.delete_many({"id": {"$gte": 999}})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:25.314502" elapsed="0.240174"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.555771" level="INFO">0 documents supprimés</msg>
<arg>${result.deleted_count} documents supprimés</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:25.554930" elapsed="0.000928"/>
</kw>
<status status="PASS" start="2025-08-07T12:46:25.314391" elapsed="0.241535"/>
</branch>
<branch type="EXCEPT">
<kw name="Log" owner="BuiltIn">
<arg>Nettoyage ignoré</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-08-07T12:46:25.556155" elapsed="0.000036"/>
</kw>
<status status="NOT RUN" start="2025-08-07T12:46:25.556008" elapsed="0.000242"/>
</branch>
<status status="PASS" start="2025-08-07T12:46:25.314351" elapsed="0.241951"/>
</try>
<doc>Supprimer les données de test</doc>
<status status="PASS" start="2025-08-07T12:46:25.314201" elapsed="0.242193"/>
</kw>
<kw name="Fermer MongoDB" owner="keywords">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Evaluate" owner="BuiltIn">
<arg>$DB_CLIENT.close()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-08-07T12:46:25.557377" elapsed="0.226758"/>
</kw>
<arg>"${DB_CLIENT}" != "${None}"</arg>
<arg>Evaluate</arg>
<arg>$DB_CLIENT.close()</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-08-07T12:46:25.556936" elapsed="0.227332"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-08-07T12:46:25.784669" level="INFO">Connexion fermée</msg>
<arg>Connexion fermée</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-08-07T12:46:25.784485" elapsed="0.000273"/>
</kw>
<doc>Fermer la connexion</doc>
<status status="PASS" start="2025-08-07T12:46:25.556662" elapsed="0.228200"/>
</kw>
<arg>Nettoyer Tests</arg>
<arg>Fermer MongoDB</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<status status="PASS" start="2025-08-07T12:46:25.313843" elapsed="0.471099"/>
</kw>
<doc>Tests d'intégration CRUD complets sur Products - Suite complète</doc>
<status status="PASS" start="2025-08-07T12:46:16.194130" elapsed="9.590878"/>
</suite>
<statistics>
<total>
<stat pass="12" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="0" skip="0">create</stat>
<stat pass="3" fail="0" skip="0">delete</stat>
<stat pass="8" fail="0" skip="0">negative</stat>
<stat pass="1" fail="0" skip="0">notfound</stat>
<stat pass="4" fail="0" skip="0">positive</stat>
<stat pass="3" fail="0" skip="0">read</stat>
<stat pass="1" fail="0" skip="0">security</stat>
<stat pass="1" fail="0" skip="0">smoke</stat>
<stat pass="3" fail="0" skip="0">update</stat>
</tag>
<suite>
<stat name="Test Crud Integration" id="s1" pass="12" fail="0" skip="0">Test Crud Integration</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
